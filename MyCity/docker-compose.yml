services:
  mycity.webhost:
    image: ${DOCKER_REGISTRY-}mycitywebhost
    container_name: 'mycity.webhost'
    build:
      context: .
      dockerfile: MyCity.WebHost/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_HTTP_PORTS=8080
      - "ConnectionStrings:MyCityDb=Host=mycity.db;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"  
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      mycity.db:
        condition: service_healthy

  mycity.db:
    image: "postgres:16-alpine"
    container_name: 'mycity.db'
    restart: unless-stopped 
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - ./volumes/postgres/db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
